interface DataProvider {
    getMasterData: <T>(key: string) => Promise<T[]>;
    getMasterDataById: <T extends HasId>(key: string, id: number) => Promise<T>;
}
interface HasId {
    id: number;
}

interface BloomBonusDetail {
    phase: number;
    descriptions: string[];
    descriptionsChinese: string[];
}

interface SenseDetail {
    descriptions: string[];
    descriptionsChinese: string[];
    type: string;
    lightCount: number;
    coolTime: {
        origin: number;
        bloom: number;
    };
}

interface StarActDetail {
    description: string;
    descriptionChinese: string;
    conditions: StarActLightCondition[];
}
interface StarActLightCondition {
    type: string;
    typeChinese: string;
    origin: number;
    bloom: number;
}

interface CharacterEpisodeDetail {
    id: number;
    episodeOrder: string;
}
declare enum CharacterEpisodeStatus {
    NONE = "None",
    FIRST = "First",
    SECOND = "Second"
}

interface CharacterStatusPreset {
    level?: number;
    awakening?: boolean;
    episode?: CharacterEpisodeStatus;
    bloom?: number;
}
interface CharacterStatusDetail {
    preset: CharacterStatusPreset;
    status: {
        vocal: number;
        expression: number;
        concentration: number;
    };
}

declare class CharacterService {
    private readonly dataProvider;
    private readonly characterBaseService;
    private readonly starActService;
    private readonly senseService;
    private readonly characterBloomService;
    private readonly storyEventService;
    private readonly gachaService;
    private readonly characterEpisodeService;
    private readonly characterCalculator;
    constructor(dataProvider?: DataProvider);
    private getCharacters;
    private getCharacter;
    getCharacterDetail(id: number): Promise<CharacterDetail>;
    getAllCharacterDetails(): Promise<CharacterDetail[]>;
}
interface CharacterDetail {
    id: number;
    name: string;
    rarity: string;
    attribute: string;
    status: CharacterStatusDetail[];
    characterBase: string;
    characterBaseChinese: string;
    starAct: StarActDetail;
    sense: SenseDetail;
    bloomBonuses: BloomBonusDetail[];
    displayStartAt: Date;
    event: string;
    gacha: string;
    episodes: CharacterEpisodeDetail[];
}

declare class CachedDataProvider implements DataProvider {
    private readonly dataProvider;
    constructor(dataProvider: DataProvider);
    private static readonly globalCache;
    private static readonly runningPromise;
    private getData;
    getMasterData<T>(key: string): Promise<T[]>;
    private static readonly idMapCache;
    getMasterDataById<T extends HasId>(key: string, id: number): Promise<T>;
}

export { CachedDataProvider, CharacterService, type DataProvider, type HasId };
